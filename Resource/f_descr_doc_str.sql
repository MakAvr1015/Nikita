/******************************************************************************/
/***          Generated by IBExpert 2011.01.11 19.01.2013 12:52:44          ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE OR ALTER PROCEDURE SP_IMPORT_DOC_OUT_STR (
    F_NAME VARCHAR(255),
    F_ARTICLE VARCHAR(20),
    F_ED_IZM VARCHAR(255),
    F_COUNT NUMERIC(15,3),
    F_PRICE NUMERIC(15,3),
    F_SKIDKA NUMERIC(15,3),
    F_EXT_ID VARCHAR(20),
    F_EXT_BASE BIGINT,
    F_DOC_ID BIGINT,
    F_DESCR VARCHAR(255) = null)
RETURNS (
    F_GOOD_ID BIGINT,
    F_ID BIGINT)
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE SP_T_DOC_OUT_STR_GET (
    P_DOC_ID BIGINT,
    P_GOOD_ID BIGINT,
    P_DOC_STR_ID BIGINT = null)
RETURNS (
    F_ID BIGINT,
    F_DOC_OUT BIGINT,
    F_GOOD BIGINT,
    F_PRICE BIGINT,
    F_CNT FLOAT,
    F_SUM FLOAT,
    F_GOOD_NAME VARCHAR(255),
    F_PRICE_VAL FLOAT,
    F_ARTICLE VARCHAR(20),
    F_ED_IZM_NAME VARCHAR(60),
    F_ED_IZM_SHORT_NAME VARCHAR(20),
    F_SKLAD_OST FLOAT,
    F_SKIDKA NUMERIC(15,3),
    F_GOOD_PARNER BIGINT,
    F_DESCR VARCHAR(255))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE SP_T_DOC_OUT_STR_I (
    F_ID BIGINT,
    F_DOC_OUT BIGINT,
    F_GOOD BIGINT,
    F_PRICE NUMERIC(15,3),
    F_CNT FLOAT,
    F_SUM FLOAT,
    F_SKD NUMERIC(15,3) = 0,
    F_DESCR VARCHAR(255) = null)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE SP_T_DOC_OUT_STR_S (
    DOC_ID BIGINT)
RETURNS (
    F_ID BIGINT,
    F_DOC_OUT BIGINT,
    F_GOOD BIGINT,
    F_PRICE BIGINT,
    F_CNT FLOAT,
    F_SUM FLOAT,
    F_GOOD_NAME VARCHAR(255),
    F_PRICE_VAL FLOAT,
    F_ARTICLE VARCHAR(20),
    F_ED_IZM_NAME VARCHAR(60),
    F_ED_IZM_SHORT_NAME VARCHAR(20),
    F_SKLAD_OST FLOAT,
    F_SKIDKA NUMERIC(15,3),
    F_GOOD_PARNER BIGINT,
    F_DESCR VARCHAR(255))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE SP_T_DOC_OUT_STR_U (
    F_ID BIGINT,
    F_DOC_OUT BIGINT,
    F_GOOD BIGINT,
    F_PRICE_VAL BIGINT,
    F_CNT FLOAT,
    F_SUM FLOAT,
    F_DESCR VARCHAR(255))
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE SP_T_DOC_TEMPLATE_STR_I (
    F_ID BIGINT,
    F_DOC_TEMPLATE BIGINT,
    F_GOOD BIGINT,
    F_PRICE_VAL NUMERIC(15,3),
    F_CNT NUMERIC(15,3),
    F_DESCR VARCHAR(255) = null)
AS
BEGIN
  EXIT;
END^





CREATE OR ALTER PROCEDURE SP_T_DOC_TEMPLATE_STR_S (
    P_TEMPLATE_DOC BIGINT)
RETURNS (
    F_ID BIGINT,
    F_DOC_TEMPLATE BIGINT,
    F_GOOD BIGINT,
    F_GOOD_NAME VARCHAR(255),
    F_ARTICLE VARCHAR(60),
    F_ED_IZM_NAME VARCHAR(60),
    F_ED_IZM_SHORT_NAME VARCHAR(20),
    F_SCANCODE VARCHAR(20),
    F_GOOD_DOP_INFO VARCHAR(255),
    F_GOOD_PARTNER BIGINT,
    F_CNT NUMERIC(15,3),
    F_PRICE_VAL NUMERIC(15,3),
    F_SUM NUMERIC(15,3),
    F_OST_SKLAD_DEF NUMERIC(15,3),
    F_DESCR VARCHAR(255))
AS
BEGIN
  SUSPEND;
END^





CREATE OR ALTER PROCEDURE SP_T_DOC_TEMPLATE_STR_U (
    F_ID BIGINT,
    F_DOC_TEMPLATE BIGINT,
    F_GOOD BIGINT,
    F_PRICE_VAL NUMERIC(15,3),
    F_CNT NUMERIC(15,3),
    F_DESCR VARCHAR(255))
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

CREATE OR ALTER PROCEDURE SP_IMPORT_DOC_OUT_STR (
    F_NAME VARCHAR(255),
    F_ARTICLE VARCHAR(20),
    F_ED_IZM VARCHAR(255),
    F_COUNT NUMERIC(15,3),
    F_PRICE NUMERIC(15,3),
    F_SKIDKA NUMERIC(15,3),
    F_EXT_ID VARCHAR(20),
    F_EXT_BASE BIGINT,
    F_DOC_ID BIGINT,
    F_DESCR VARCHAR(255) = null)
RETURNS (
    F_GOOD_ID BIGINT,
    F_ID BIGINT)
AS
declare variable F_IZM bigint;
declare variable V_STR_ID bigint;
begin
  f_good_id=0;
  if (exists(select first 1 f_id from t_nsi_goods where f_article=:f_article) ) then
  begin
    select first 1 f_id from t_nsi_goods where f_article=:f_article into :f_good_id;
  end
  if (not exists (select 1 from t_nsi_ed_izm where upper(f_name)=upper(:f_ed_izm))) then
  begin
    f_izm=GEN_ID(GEN_T_NSI_ED_IZM_ID,1);
    execute procedure SP_T_NSI_ED_IZM_I(:f_izm,:f_ed_izm,:f_ed_izm);
  end
  else
    select f_id from t_nsi_ed_izm where upper(f_name)=upper(:f_ed_izm) into :f_id;
  if (f_good_id<1) then
  begin
    select f_id
    from
      SP_T_NSI_GOODS_I(:f_name,null,:f_article,:f_izm)
    into :f_good_id;
    insert into t_sys_links(f_table_name,f_remote_base,f_remote_id,f_self_id) values('T_NSI_GOODS',:f_ext_base,:f_ext_id,:f_good_id);
  end
  v_str_id=gEN_ID(gen_t_doc_out_str_id,1);
  execute procedure SP_T_DOC_out_STR_I(:v_str_id, :f_doc_id,:f_good_id,null,:f_count,null,0,:f_descr);
  update t_doc_out_str set f_price_val=:f_price,f_price_val_nsi=:f_price+coalesce(:f_skidka/:f_count,0) where f_id=:v_str_id;
  /*execute procedure SP_T_DOC_out_STR_u(:v_str_id,null, null,:f_price,null,null);
  update t_doc_out_str set f_price_val=:f_price where f_id=:v_str_id;*/
  suspend;
end^


CREATE OR ALTER PROCEDURE SP_T_DOC_OUT_STR_GET (
    P_DOC_ID BIGINT,
    P_GOOD_ID BIGINT,
    P_DOC_STR_ID BIGINT = null)
RETURNS (
    F_ID BIGINT,
    F_DOC_OUT BIGINT,
    F_GOOD BIGINT,
    F_PRICE BIGINT,
    F_CNT FLOAT,
    F_SUM FLOAT,
    F_GOOD_NAME VARCHAR(255),
    F_PRICE_VAL FLOAT,
    F_ARTICLE VARCHAR(20),
    F_ED_IZM_NAME VARCHAR(60),
    F_ED_IZM_SHORT_NAME VARCHAR(20),
    F_SKLAD_OST FLOAT,
    F_SKIDKA NUMERIC(15,3),
    F_GOOD_PARNER BIGINT,
    F_DESCR VARCHAR(255))
AS
declare variable F_SKLAD bigint;
declare variable F_DATE date;
declare variable F_DOC_STATE bigint;
declare variable F_SKIDKA_PERCENT integer;
BEGIN
  select f_sklad, f_date, f_state, f_skidka
  from sp_t_doc_out_get(:p_doc_id)
  into
    :f_sklad,
    :f_date,
    :f_doc_state,
    :f_skidka_percent;
  FOR SELECT first 1 F_ID,
             F_DOC_out,
             F_GOOD,
             F_PRICE,
             F_CNT,
             F_SUM,
             F_PRICE_VAL,
             F_CNT*(coalesce(F_PRICE_VAL_NSI,F_PRICE_VAL)-F_PRICE_VAL),
             f_descr
--             f_sum/(100-coalesce(:f_skidka_percent,0))*coalesce(:f_skidka_percent,0)
      FROM T_DOC_out_STR
      where
        f_doc_out=:p_doc_id
        and ( f_good = :p_good_id )
      INTO :F_ID,
           :F_DOC_out,
           :F_GOOD,
           :F_PRICE,
           :F_CNT,
           :F_SUM,
           :F_PRICE_VAL,
           :f_skidka,
           :f_descr
  DO
  BEGIN
    if (coalesce(f_good,-1)>0) then
    begin
      select f_name,f_article,f_ed_izm_name,f_ed_izm_short_name,f_partner from sp_t_nsi_goods_get(:f_good,null)
        into :f_good_name,:f_article,:f_ed_izm_name,:f_ed_izm_short_name,:f_good_parner;
      select f_end_ost from sp_t_reg_good_get(:f_good,:f_date,:f_sklad) into :f_sklad_ost;
      if (not exists(select param_value from sp_get_sys_param('CHANGE_SKLAD_OST_STATE') where param_value<=:f_doc_state)) then
        f_sklad_ost=f_sklad_ost-f_cnt;
    end
    SUSPEND;
  END
END^


CREATE OR ALTER PROCEDURE SP_T_DOC_OUT_STR_I (
    F_ID BIGINT,
    F_DOC_OUT BIGINT,
    F_GOOD BIGINT,
    F_PRICE NUMERIC(15,3),
    F_CNT FLOAT,
    F_SUM FLOAT,
    F_SKD NUMERIC(15,3) = 0,
    F_DESCR VARCHAR(255) = null)
AS
declare variable V_PRICE_NSI_ID bigint;
declare variable V_PRICE numeric(15,3);
declare variable V_PRICE_VAL numeric(15,3);
declare variable F_SKIDKA integer;
declare variable V_ROUND numeric(15,3);
declare variable V_PRICE_VAL_SK numeric(15,3);
declare variable V_SKIDKA_ID bigint;
declare variable V_SKIDKA_ROUND numeric(15,3);
BEGIN
  select param_value from sp_get_sys_param('OUT_DOC_SKIDKA') into :V_SKIDKA_id;
  select f_round from t_nsi_skidka where f_id=:v_skidka_id into :v_skidka_round;


  select coalesce(f_skidka,0),coalesce(f_price,0) from sp_t_doc_out_get(:f_doc_out) into :f_skidka,:v_price;
  if (v_price>0) then
  begin
    select f_id,f_value from SP_T_PRICE_GET(:v_price,:f_good) into :v_price_nsi_id,:v_price_val;
    select f_round from sp_t_nsi_price_get(:v_price) into :v_round;
  end
  else
  begin
    v_price_val=f_price;
  end
  if (coalesce(f_skd,0)=0) then
    v_price_val_sk=v_price_val*(100-f_skidka)/100.00;
  else
  begin
    v_price_val=f_price+coalesce(:f_skd/:f_cnt,0);
    v_price_val_sk=f_price;
  end
  if (v_price_val_sk<>v_price_val) then
    select f_result from sp_round(:v_price_val_sk,:v_skidka_round) into :v_price_val_sk;
  if (exists(select 1 from T_DOC_OUT_STR where
      f_doc_out=:F_DOC_OUT and F_GOOD=:F_GOOD)) then
  begin
    update T_DOC_OUT_STR
    set F_CNT=F_CNT+coalesce(:F_CNT,1)
    where f_doc_out=:F_DOC_OUT and F_GOOD=:F_GOOD;
  end
  else
  begin
    INSERT INTO T_DOC_OUT_STR (
      F_ID,
      F_DOC_OUT,
      F_GOOD,
      F_PRICE,
      F_CNT,
      f_price_val,
      f_price_val_nsi,
      f_descr)
    VALUES (
      :F_ID,
      :F_DOC_OUT,
      :F_GOOD,
      :v_price_nsi_id,
      coalesce(:F_CNT,1),
      :v_price_val_sk,
      :v_price_val,
      :f_descr
      );
   end
END^


CREATE OR ALTER PROCEDURE SP_T_DOC_OUT_STR_S (
    DOC_ID BIGINT)
RETURNS (
    F_ID BIGINT,
    F_DOC_OUT BIGINT,
    F_GOOD BIGINT,
    F_PRICE BIGINT,
    F_CNT FLOAT,
    F_SUM FLOAT,
    F_GOOD_NAME VARCHAR(255),
    F_PRICE_VAL FLOAT,
    F_ARTICLE VARCHAR(20),
    F_ED_IZM_NAME VARCHAR(60),
    F_ED_IZM_SHORT_NAME VARCHAR(20),
    F_SKLAD_OST FLOAT,
    F_SKIDKA NUMERIC(15,3),
    F_GOOD_PARNER BIGINT,
    F_DESCR VARCHAR(255))
AS
declare variable F_SKLAD bigint;
declare variable F_DATE date;
declare variable F_DOC_STATE bigint;
declare variable F_SKIDKA_PERCENT integer;
BEGIN
  select f_sklad, f_date, f_state, f_skidka
  from t_doc_out
  where f_id =:doc_id
  into
    :f_sklad,
    :f_date,
    :f_doc_state,
    :f_skidka_percent;
  FOR SELECT F_ID,
             F_DOC_out,
             F_GOOD,
             F_PRICE,
             F_CNT,
             F_SUM,
             F_PRICE_VAL,
             F_CNT*(coalesce(F_PRICE_VAL_NSI,F_PRICE_VAL)-F_PRICE_VAL),
             f_descr
--             f_sum/(100-coalesce(:f_skidka_percent,0))*coalesce(:f_skidka_percent,0)
      FROM T_DOC_out_STR
      where
        f_doc_out=:doc_id
      INTO :F_ID,
           :F_DOC_out,
           :F_GOOD,
           :F_PRICE,
           :F_CNT,
           :F_SUM,
           :F_PRICE_VAL,
           :f_skidka,
           :f_descr
  DO
  BEGIN
    if (coalesce(f_good,-1)>0) then
    begin
      select f_name,f_article,f_ed_izm_name,f_ed_izm_short_name,f_partner from sp_t_nsi_goods_get(:f_good,null)
        into :f_good_name,:f_article,:f_ed_izm_name,:f_ed_izm_short_name,:f_good_parner;
      select f_end_ost from sp_t_reg_good_get(:f_good,:f_date,:f_sklad) into :f_sklad_ost;
      if (not exists(select param_value from sp_get_sys_param('CHANGE_SKLAD_OST_STATE') where param_value<=:f_doc_state)) then
        f_sklad_ost=f_sklad_ost-f_cnt;
    end
    SUSPEND;
  END
END^


CREATE OR ALTER PROCEDURE SP_T_DOC_OUT_STR_U (
    F_ID BIGINT,
    F_DOC_OUT BIGINT,
    F_GOOD BIGINT,
    F_PRICE_VAL BIGINT,
    F_CNT FLOAT,
    F_SUM FLOAT,
    F_DESCR VARCHAR(255))
AS
BEGIN
  UPDATE T_DOC_OUT_STR
  SET F_DOC_OUT = coalesce(:F_DOC_OUT,f_doc_out),
      F_GOOD = coalesce(:F_GOOD,f_good),
      F_PRICE_VAL = coalesce(:F_PRICE_VAL,f_price_val),
      F_CNT = coalesce(:F_CNT,f_cnt),
      f_descr=:f_descr
--      F_SUM = :F_SUM
  WHERE (F_ID = :F_ID);
END^


CREATE OR ALTER PROCEDURE SP_T_DOC_TEMPLATE_STR_I (
    F_ID BIGINT,
    F_DOC_TEMPLATE BIGINT,
    F_GOOD BIGINT,
    F_PRICE_VAL NUMERIC(15,3),
    F_CNT NUMERIC(15,3),
    F_DESCR VARCHAR(255) = null)
AS
declare variable V_PRICE bigint;
declare variable V_PRICE_VAL numeric(15,3);
begin
  if (not exists(select 1
                 from T_DOC_TEMPLATE_STR
                 where F_GOOD = :F_GOOD and
                       F_DOC_TEMPLATE = :F_DOC_TEMPLATE)) then
  begin
    select coalesce(F_PRICE, 0)
    from SP_T_DOC_TEMPLATE_GET(:F_DOC_TEMPLATE)
    into :V_PRICE;
    if (V_PRICE > 0) then
    begin
      select F_VALUE
      from SP_T_PRICE_GET(:V_PRICE, :F_GOOD)
      into :V_PRICE_VAL;
    end
    else
    begin
      V_PRICE_VAL = F_PRICE_VAL;
    end

    insert into T_DOC_TEMPLATE_STR (F_ID, F_DOC_TEMPLATE, F_GOOD, F_PRICE_VAL, F_CNT, f_descr)
    values (:F_ID, :F_DOC_TEMPLATE, :F_GOOD, :V_PRICE_VAL, coalesce(:F_CNT, 1),:f_descr);
  end
  else
    update T_DOC_TEMPLATE_STR
    set F_CNT = coalesce(F_CNT, 0) + coalesce(:F_CNT, 1)
    where F_GOOD = :F_GOOD and
          F_DOC_TEMPLATE = :F_DOC_TEMPLATE;
end^


CREATE OR ALTER PROCEDURE SP_T_DOC_TEMPLATE_STR_S (
    P_TEMPLATE_DOC BIGINT)
RETURNS (
    F_ID BIGINT,
    F_DOC_TEMPLATE BIGINT,
    F_GOOD BIGINT,
    F_GOOD_NAME VARCHAR(255),
    F_ARTICLE VARCHAR(60),
    F_ED_IZM_NAME VARCHAR(60),
    F_ED_IZM_SHORT_NAME VARCHAR(20),
    F_SCANCODE VARCHAR(20),
    F_GOOD_DOP_INFO VARCHAR(255),
    F_GOOD_PARTNER BIGINT,
    F_CNT NUMERIC(15,3),
    F_PRICE_VAL NUMERIC(15,3),
    F_SUM NUMERIC(15,3),
    F_OST_SKLAD_DEF NUMERIC(15,3),
    F_DESCR VARCHAR(255))
AS
declare variable V_DATE date;
declare variable V_SKLAD bigint;
begin
  select F_DATE
  from T_DOC_TEMPLATE
  where F_ID = :P_TEMPLATE_DOC
  into :V_DATE;
  select PARAM_VALUE
  from SP_GET_SYS_PARAM('default_sklad')
  into :V_SKLAD;

  for select F_ID, F_DOC_TEMPLATE, F_GOOD, F_CNT, F_PRICE_VAL, F_SUM, f_descr
      from T_DOC_TEMPLATE_STR
      where F_DOC_TEMPLATE = :P_TEMPLATE_DOC
      into :F_ID, :F_DOC_TEMPLATE, :F_GOOD, :F_CNT, :F_PRICE_VAL, :F_SUM, :f_descr
  do
  begin
    if (coalesce(F_GOOD, 0) > 0) then
      select F_NAME, F_ARTICLE, F_ED_IZM_NAME, F_ED_IZM_SHORT_NAME, F_SCANCODE, F_DOP_INFO, F_PARTNER
      from SP_T_NSI_GOODS_GET(:F_GOOD, null)
      into :F_GOOD_NAME, :F_ARTICLE, :F_ED_IZM_NAME, :F_ED_IZM_SHORT_NAME, :F_SCANCODE, :F_GOOD_DOP_INFO,
           :F_GOOD_PARTNER;
    select F_END_OST
    from SP_T_REG_GOOD_GET(:F_GOOD, :V_DATE, :V_SKLAD)
    into :F_OST_SKLAD_DEF;

    suspend;
  end
end^


CREATE OR ALTER PROCEDURE SP_T_DOC_TEMPLATE_STR_U (
    F_ID BIGINT,
    F_DOC_TEMPLATE BIGINT,
    F_GOOD BIGINT,
    F_PRICE_VAL NUMERIC(15,3),
    F_CNT NUMERIC(15,3),
    F_DESCR VARCHAR(255))
AS
begin
    update T_DOC_TEMPLATE_STR
    set F_CNT = coalesce(:F_CNT, 1)
    where F_id = :F_id and f_cnt<>:f_cnt;
    update T_DOC_TEMPLATE_STR
    set F_price_val = :f_price_val
    where f_id=:f_id and F_price_val <> :f_price_val;
    update T_DOC_TEMPLATE_STR
    set F_good = :f_good
    where f_id=:f_id and F_good <> :f_good;
    update T_DOC_TEMPLATE_STR
    set F_descr = :f_descr
    where f_id=:f_id and coalesce(F_descr,'') <> coalesce(:f_descr,'');

end^



SET TERM ; ^
